type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/ButtleShip.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;

    public class ButtleShip {
        final static int RESOLUTION = 10;
        char[][] field = new char[RESOLUTION][RESOLUTION];

        public ButtleShip() {
            for (char[] chArr: field) {
                Arrays.fill(chArr, '~');
            }
        }

        public boolean checkShipLocation(UserShip userShip) {
            int[] c1 = userShip.getStart().getCoordinate();
            int[] c2 = userShip.getEnd().getCoordinate();

            for (int i = c1[0]; i <= c2[0] ; i++) {
                for (int j = c1[1]; j <= c2[1]; j++) {
                    if(!isFree(i, j)) {
                        return false;
                    }
                }
            }
            return true;
        }

        public boolean setShip(UserShip userShip) {
            if (checkShipLocation(userShip)) {
                int[] c1 = userShip.getStart().getCoordinate();
                int[] c2 = userShip.getEnd().getCoordinate();

                for (int i = c1[0]; i <= c2[0] ; i++) {
                    for (int j = c1[1]; j <= c2[1]; j++) {
                        field[i][j] = 'o';
                    }
                }
                return true;
            } else {
                return false;
            }
        }

        public boolean isFree(int y, int x) {
            int left = x == 0 ? x : x - 1;
            int right = x == RESOLUTION - 1 ? x : x + 1;
            int top = y == 0 ? y : y - 1;
            int bottom = y == RESOLUTION - 1 ? y : y + 1;

            for (int i = left; i <= right; i++) {
                for (int j = top; j <= bottom ; j++) {
                    if (field[j][i] != '~') {
                        return false;
                    }
                }
            }
            return true;
        }

        public boolean doShort(Coordinate cShot) {
            boolean res = false;
            int y = cShot.getY();
            int x = cShot.getX();
            switch (field[y][x]) {
                case '~' -> {
                    field[y][x] = 'M';
                    res = false;
                }
                case 'o' -> {
                    field[y][x] = 'X';
                    res = true;
                }
                default -> {
                }
            }
            return res;
        }

        public String toStringHideShips() {
            String str = "  1 2 3 4 5 6 7 8 9 10";
            for (int i = 0; i < RESOLUTION; i++) {
                str += "\n" + (char) ('A' + i);
                for (int j = 0; j < RESOLUTION; j++) {
                    str += " " + (field[i][j] == 'o' ? '~' : field[i][j]);
                }
            }
            return str;
        }


        @Override
        public String toString() {
            String str = "  1 2 3 4 5 6 7 8 9 10";
            for (int i = 0; i < RESOLUTION; i++) {
                str += "\n" + (char) ('A' + i);
                for (int j = 0; j < RESOLUTION; j++) {
                    str += " " + field[i][j];
                }
            }
            return str;
        }

    }
  learner_created: true
- name: src/battleship/Coordinate.java
  visible: true
  text: |
    package battleship;

    public class Coordinate implements Comparable<Coordinate>{
        private final static int MAX_N = 10;
        private final static char MAX_CH = 'J';
        private final static char MIN_CH = 'A';
        private final int[] coordinate;

        public Coordinate(String posStr) {
            this.coordinate = parseCoordinate(posStr);
        }

        public Coordinate(Coordinate coordinate) {
            this.coordinate = coordinate.getCoordinate().clone();
        }

        public static int[] parseCoordinate(String str) {
            if (!checkCoordinate(str)) {
                throw new IllegalArgumentException();
            }

            return new int[]{(str.toUpperCase().charAt(0) - MIN_CH), Integer.parseInt(str.substring(1)) - 1};
        }

        public static boolean checkCoordinate(String str) {
            boolean res = true;
            char l = ' ';
            int n = 0;
            if (str != null && str.length() >= 2 && str.length() <= 3) {
                l = str.toUpperCase().charAt(0);
                try {
                    n = Integer.parseInt(str.substring(1));
                } catch (NumberFormatException e) {
                    n = 0;
                }
                if (l < MIN_CH || l > MAX_CH || n <= 0 || n > MAX_N) {
                    res = false;
                }
            } else {
                res = false;
            }
            return res;
        }


        @Override
        public String toString() {
            return "" + (char) (coordinate[0] + MIN_CH) + (coordinate[1] + 1);
        }

        public int[] getCoordinate() {
            return coordinate;
        }

        public int getX() {
            return coordinate[1];
        }

        public int getY() {
            return coordinate[0];
        }

        @Override
        public int compareTo(Coordinate o) {
            if (this.getX() == o.getX() && this.getY() == o.getY()) {
                return 0;
            } else if (this.getX() >= o.getX() && this.getY() >= o.getY()) {
                return 1;
            } else {
                return -1;
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER(5, "Aircraft Carrier"),
        BATTLESHIP(4, "Battleship"),
        SUBMARINE(3, "Submarine"),
        CRUISER(3, "Cruiser"),
        DESTROYER(2, "Destroyer");

        private int size;
        private String name;


        Ship(int size, String name) {
            this.size = size;
            this.name = name;
        }

        public int getSize() {
            return this.size;
        }

        public String getName() {
            return this.name;
        }

        @Override
        public String toString() {
            return "Ship{" +
                    "size=" + size +
                    ", name='" + name + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/battleship/UserShip.java
  visible: true
  text: |
    package battleship;

    public class UserShip {
        private final Coordinate start;
        private final Coordinate end;
        private final Ship ship;

        public UserShip(Ship ship, Coordinate start, Coordinate end) {
            if (!checkPosition(ship, start, end)) {
                throw new IllegalArgumentException();
            }
            this.start = new Coordinate(start);
            this.end = new Coordinate(end);
            this.ship = ship;
        }

        public static boolean checkPosition(Ship ship, Coordinate start, Coordinate end) {
            boolean res = false;

            if (start.getX() == end.getX() && ship.getSize() == end.getY() - start.getY() + 1
                || start.getY() == end.getY() && ship.getSize() == end.getX() - start.getX() + 1) {
                res = true;
            }

            return res;
        }

        public static boolean checkLength(Ship ship, Coordinate start, Coordinate end) {
            boolean res = false;

            if (ship.getSize() == end.getY() - start.getY() + 1
                    || ship.getSize() == end.getX() - start.getX() + 1) {
                res = true;
            }

            return res;
        }


        public Ship getShip() {
            return ship;
        }

        public Coordinate getEnd() {
            return end;
        }

        public Coordinate getStart() {
            return start;
        }

        @Override
        public String toString() {
            return "UserShip{" +
                    "ship=" + ship +
                    ", start=" + start +
                    ", end=" + end +
                    '}';
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        public static void setShips(ButtleShip buttleShip) {
            Scanner scanner = new Scanner(System.in);

            for (Ship ship: Ship.values()) {
                System.out.println("Enter the coordinates of the "
                        + ship.getName() + " ("
                        + ship.getSize() + " cells):");
                while (true) {
                    String[] str = scanner.nextLine().split(" ");

                    if (Coordinate.checkCoordinate(str[0]) && Coordinate.checkCoordinate(str[1])) {
                        Coordinate c1 = new Coordinate(str[0]);
                        Coordinate c2 = new Coordinate(str[1]);
                        if(c1.compareTo(c2) == 1) {
                            c1  = new Coordinate(str[1]);
                            c2  = new Coordinate(str[0]);
                        }
                        if (UserShip.checkLength(ship, c1, c2)) {
                            if (UserShip.checkPosition(ship, c1, c2)) {
                                UserShip sh1 = new UserShip(ship, c1, c2);
                                if (buttleShip.setShip(sh1)) {
                                    System.out.println(buttleShip);
                                    System.out.println();
                                    break;
                                } else {
                                    System.out.println("Error! You placed it too close to another one. Try again:");
                                }
                            } else {
                                System.out.println("Error! Wrong ship location! Try again:");
                            }
                        } else {
                            System.out.println("Error! Wrong length of the " + ship.getName() + "! Try again:");
                        }
                    } else {
                        System.out.println("Error! Wrong coordinates! Try again:");
                    }
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10597#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 02 Nov 2022 09:54:01 UTC"
record: 4
